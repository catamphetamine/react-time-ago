{"version":3,"sources":["webpack://javascript-time-ago/webpack/universalModuleDefinition","webpack://javascript-time-ago/webpack/bootstrap","webpack://javascript-time-ago/./node_modules/relative-time-format/modules/LocaleDataStore.js","webpack://javascript-time-ago/./node_modules/relative-time-format/modules/resolveLocale.js","webpack://javascript-time-ago/./node_modules/relative-time-format/modules/RelativeTimeFormat.js","webpack://javascript-time-ago/../source/cache.js","webpack://javascript-time-ago/../../source/gradation/helpers.js","webpack://javascript-time-ago/../../source/gradation/convenient.js","webpack://javascript-time-ago/../source/grade.js","webpack://javascript-time-ago/../source/locale.js","webpack://javascript-time-ago/../../source/style/default.js","webpack://javascript-time-ago/../../source/gradation/canonical.js","webpack://javascript-time-ago/../../source/style/twitter.js","webpack://javascript-time-ago/../../source/style/time.js","webpack://javascript-time-ago/../source/LocaleDataStore.js","webpack://javascript-time-ago/../source/JavascriptTimeAgo.js","webpack://javascript-time-ago/./index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","defaultLocale","localesData","getDefaultLocale","LocaleDataStore_getLocaleData","locale","resolveLocale","localeMatcher","arguments","length","undefined","resolveLocaleLookup","RangeError","concat","parts","split","pop","join","_defineProperties","target","props","descriptor","configurable","writable","_defineProperty","obj","UNITS","NUMERIC_VALUES","STYLE_VALUES","RelativeTimeFormat_RelativeTimeFormat","RelativeTimeFormat","locales","options","instance","Constructor","TypeError","_classCallCheck","this","numeric","style","indexOf","push","supportedLocalesOf","Intl","NumberFormat","numberFormat","protoProps","staticProps","unit","getRule","replace","formatNumber","Math","abs","rule","valueIndex","type","slice","unitRules","message","_message","current","quantifierRules","quantify","quantifier","other","number","format","String","filter","addLocale","localeData","Error","setDefaultLocale","Cache","cache","_len","keys","Array","_key","_i","_typeof","_len2","_key2","lastKey","_i2","day","getStep","gradation","_iterator","_isArray","isArray","iterator","_ref","next","done","step","getDate","Date","convenient","factor","threshold","threshold_for_now","granularity","threshold_for_minute","grade","elapsed","now","units","getAllowedSteps","findGradationStep","fromStep","toStep","grade_typeof","JSON","getThreshold","amount","intlDateTimeFormatSupportedLocale","intlDateTimeFormatSupported","locale_typeof","DateTimeFormat","style_default","flavour","canonical","formatters","twitter","_objectSpread","this_year","month","getFullYear","nextYear","year","style_time","modules_LocaleDataStore_getLocaleData","JavascriptTimeAgo","JavascriptTimeAgo_classCallCheck","isLocaleDataAvailable","chooseLocale","relativeTimeFormatCache","input","defaultStyle","_getDateAndTimeBeingF","date","time","JavascriptTimeAgo_typeof","getDateAndTimeBeingFormatted","_this$getLocaleData","getLocaleData","custom","restrictedSetOfUnits","_","getTimeIntervalMeasurementUnits","console","past","future","getNowMessage","getFormatter","formatValue","flavor","put","addLocaleData","__webpack_exports__","JavascriptTimeAgo_JavascriptTimeAgo"],"mappings":"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","file":"javascript-time-ago.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"javascript-time-ago\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"javascript-time-ago\"] = factory();\n\telse\n\t\troot[\"javascript-time-ago\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// Fallback locale.\n// (when not a single one of the supplied \"preferred\" locales is available)\nvar defaultLocale = 'en'; // For all locales added\n// their relative time formatter messages will be stored here.\n\nvar localesData = {};\nexport function getDefaultLocale() {\n  return defaultLocale;\n}\nexport function setDefaultLocale(locale) {\n  defaultLocale = locale;\n} // export function isLocaleDataAvailable(locale) {\n//  return localesData.hasOwnProperty(locale)\n// }\n\nexport function getLocaleData(locale) {\n  return localesData[locale];\n}\nexport function addLocaleData(localeData) {\n  if (!localeData) {\n    throw new Error('No locale data passed');\n  } // This locale data is stored in a global variable\n  // and later used when calling `.format(time)`.\n\n\n  localesData[localeData.locale] = localeData;\n}\n//# sourceMappingURL=LocaleDataStore.js.map","import { getLocaleData } from './LocaleDataStore';\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * @param  {string} locale\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocale(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocale(\"xx-Latn\")\r\n */\n\nexport default function resolveLocale(locale) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var localeMatcher = options.localeMatcher || 'lookup';\n\n  switch (localeMatcher) {\n    case 'lookup':\n      return resolveLocaleLookup(locale);\n    // \"best fit\" locale matching is not supported.\n    // https://github.com/catamphetamine/relative-time-format/issues/2\n\n    case 'best fit':\n      // return resolveLocaleBestFit(locale)\n      return resolveLocaleLookup(locale);\n\n    default:\n      throw new RangeError(\"Invalid \\\"localeMatcher\\\" option: \".concat(localeMatcher));\n  }\n}\n/**\r\n * Resolves a locale to a supported one (if any).\r\n * Starts from the most specific locale and gradually\r\n * falls back to less specific ones.\r\n * This is a basic implementation of the \"lookup\" algorithm.\r\n * https://tools.ietf.org/html/rfc4647#section-3.4\r\n * @param  {string} locale\r\n * @return {string} [locale]\r\n * @example\r\n * // Returns \"sr\"\r\n * resolveLocaleLookup(\"sr-Cyrl-BA\")\r\n * // Returns `undefined`\r\n * resolveLocaleLookup(\"xx-Latn\")\r\n */\n\nexport function resolveLocaleLookup(locale) {\n  if (getLocaleData(locale)) {\n    return locale;\n  } // `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\n\n\n  var parts = locale.split('-');\n\n  while (locale.length > 1) {\n    parts.pop();\n    locale = parts.join('-');\n\n    if (getLocaleData(locale)) {\n      return locale;\n    }\n  }\n}\n//# sourceMappingURL=resolveLocale.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getDefaultLocale, setDefaultLocale, getLocaleData, addLocaleData } from './LocaleDataStore';\nimport resolveLocale from './resolveLocale'; // Valid time units.\n\nexport var UNITS = [\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\"]; // Valid values for the `numeric` option.\n\nvar NUMERIC_VALUES = [\"auto\", \"always\"]; // Valid values for the `style` option.\n\nvar STYLE_VALUES = [\"long\", \"short\", \"narrow\"];\n/**\r\n * Polyfill for `Intl.RelativeTimeFormat` proposal.\r\n * https://github.com/tc39/proposal-intl-relative-time\r\n * https://github.com/tc39/proposal-intl-relative-time/issues/55\r\n */\n\nvar RelativeTimeFormat =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param {(string|string[])} [locales] - Preferred locales (or locale).\r\n   * @param {Object} [options] - Formatting options.\r\n   * @param {string} [options.style=\"long\"] - One of: \"long\", \"short\", \"narrow\".\r\n   * @param {string} [options.numeric=\"always\"] - (Version >= 2) One of: \"always\", \"auto\".\r\n   * @param {string} [options.localeMatcher=\"lookup\"] - One of: \"lookup\", \"best fit\". Currently only \"lookup\" is supported.\r\n   */\n  function RelativeTimeFormat() {\n    var locales = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, RelativeTimeFormat);\n\n    _defineProperty(this, \"numeric\", \"always\");\n\n    _defineProperty(this, \"style\", \"long\");\n\n    _defineProperty(this, \"localeMatcher\", \"lookup\");\n\n    var numeric = options.numeric,\n        style = options.style,\n        localeMatcher = options.localeMatcher; // Set `numeric` option.\n\n    if (numeric) {\n      if (NUMERIC_VALUES.indexOf(numeric) < 0) {\n        throw new RangeError(\"Invalid \\\"numeric\\\" option: \".concat(numeric));\n      }\n\n      this.numeric = numeric;\n    } // Set `style` option.\n\n\n    if (style) {\n      if (STYLE_VALUES.indexOf(style) < 0) {\n        throw new RangeError(\"Invalid \\\"style\\\" option: \".concat(style));\n      }\n\n      this.style = style;\n    } // Set `localeMatcher` option.\n\n\n    if (localeMatcher) {\n      this.localeMatcher = localeMatcher;\n    } // Set `locale`.\n    // Convert `locales` to an array.\n\n\n    if (typeof locales === 'string') {\n      locales = [locales];\n    } // Add default locale.\n\n\n    locales.push(getDefaultLocale()); // Choose the most appropriate locale.\n\n    this.locale = RelativeTimeFormat.supportedLocalesOf(locales, {\n      localeMatcher: this.localeMatcher\n    })[0];\n\n    if (!this.locale) {\n      throw new TypeError(\"No supported locale was found\");\n    }\n\n    this.locale = resolveLocale(this.locale, {\n      localeMatcher: this.localeMatcher\n    }); // Use `Intl.NumberFormat` for formatting numbers (when available).\n\n    if (typeof Intl !== 'undefined' && Intl.NumberFormat) {\n      this.numberFormat = new Intl.NumberFormat(this.locale);\n    }\n  }\n  /**\r\n   * Formats time `value` in `units` (either in past or in future).\r\n   * @param {number} value - Time interval value.\r\n   * @param {string} unit - Time interval measurement unit.\r\n   * @return {string}\r\n   * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n   * @example\r\n   * // Returns \"2 days ago\"\r\n   * rtf.format(-2, \"day\")\r\n   * // Returns \"in 5 minutes\"\r\n   * rtf.format(5, \"minute\")\r\n   */\n\n\n  _createClass(RelativeTimeFormat, [{\n    key: \"format\",\n    value: function format(value, unit) {\n      return this.getRule(value, unit).replace('{0}', this.formatNumber(Math.abs(value)));\n    }\n    /**\r\n     * Formats time `value` in `units` (either in past or in future).\r\n     * @param {number} value - Time interval value.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @return {Object[]} The parts (`{ type, value }`).\r\n     * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n     * @example\r\n     * // Version 1.\r\n     * // Returns [\r\n     * //   { type: \"literal\", value: \"in \" },\r\n     * //   { type: \"day\", value: \"100\" },\r\n     * //   { type: \"literal\", value: \" days\" }\r\n     * // ]\r\n     * rtf.formatToParts(100, \"day\")\r\n     * //\r\n     * // Version 2.\r\n     * // Returns [\r\n     * //   { type: \"literal\", value: \"in \" },\r\n     * //   { type: \"integer\", value: \"100\", unit: \"day\" },\r\n     * //   { type: \"literal\", value: \" days\" }\r\n     * // ]\r\n     * rtf.formatToParts(100, \"day\")\r\n     */\n\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(value, unit) {\n      var rule = this.getRule(value, unit);\n      var valueIndex = rule.indexOf(\"{0}\"); // \"yesterday\"/\"today\"/\"tomorrow\".\n\n      if (valueIndex < 0) {\n        return [{\n          type: \"literal\",\n          value: rule\n        }];\n      }\n\n      var parts = [];\n\n      if (valueIndex > 0) {\n        parts.push({\n          type: \"literal\",\n          value: rule.slice(0, valueIndex)\n        });\n      }\n\n      parts.push({\n        unit: unit,\n        type: \"integer\",\n        value: this.formatNumber(Math.abs(value))\n      });\n\n      if (valueIndex + \"{0}\".length < rule.length - 1) {\n        parts.push({\n          type: \"literal\",\n          value: rule.slice(valueIndex + \"{0}\".length)\n        });\n      }\n\n      return parts;\n    }\n    /**\r\n     * Returns formatting rule for `value` in `units` (either in past or in future).\r\n     * @param {number} value - Time interval value.\r\n     * @param {string} unit - Time interval measurement unit.\r\n     * @return {string}\r\n     * @throws {RangeError} If unit is not one of \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\".\r\n     * @example\r\n     * // Returns \"{0} days ago\"\r\n     * getRule(-2, \"day\")\r\n     */\n\n  }, {\n    key: \"getRule\",\n    value: function getRule(value, unit) {\n      if (UNITS.indexOf(unit) < 0) {\n        throw new RangeError(\"Unknown time unit: \".concat(unit, \".\"));\n      } // Get locale-specific time interval formatting rules\n      // of a given `style` for the given value of measurement `unit`.\n      //\n      // E.g.:\n      //\n      // ```json\n      // {\n      //  \"past\": {\n      //    \"one\": \"a second ago\",\n      //    \"other\": \"{0} seconds ago\"\n      //  },\n      //  \"future\": {\n      //    \"one\": \"in a second\",\n      //    \"other\": \"in {0} seconds\"\n      //  }\n      // }\n      // ```\n      //\n\n\n      var unitRules = getLocaleData(this.locale)[this.style][unit]; // Special case for \"yesterday\"/\"today\"/\"tomorrow\".\n\n      if (this.numeric === \"auto\") {\n        // \"yesterday\", \"the day before yesterday\", etc.\n        if (value === -2 || value === -1) {\n          var message = unitRules[\"previous\".concat(value === -1 ? '' : '-' + Math.abs(value))];\n\n          if (message) {\n            return message;\n          }\n        } // \"tomorrow\", \"the day after tomorrow\", etc.\n        else if (value === 1 || value === 2) {\n            var _message = unitRules[\"next\".concat(value === 1 ? '' : '-' + Math.abs(value))];\n\n            if (_message) {\n              return _message;\n            }\n          } // \"today\"\n          else if (value === 0) {\n              if (unitRules.current) {\n                return unitRules.current;\n              }\n            }\n      } // Choose either \"past\" or \"future\" based on time `value` sign.\n      // If there's only \"other\" then it's being collapsed.\n      // (the resulting bundle size optimization technique)\n\n\n      var quantifierRules = unitRules[value <= 0 ? \"past\" : \"future\"]; // Bundle size optimization technique.\n\n      if (typeof quantifierRules === \"string\") {\n        return quantifierRules;\n      } // Quantify `value`.\n\n\n      var quantify = getLocaleData(this.locale).quantify;\n      var quantifier = quantify && quantify(Math.abs(value)); // There seems to be no such locale in CLDR\n      // for which `quantify` is missing\n      // and still `past` and `future` messages\n      // contain something other than \"other\".\n\n      /* istanbul ignore next */\n\n      quantifier = quantifier || 'other'; // \"other\" rule is supposed to be always present.\n      // If only \"other\" rule is present then \"rules\" is not an object and is a string.\n\n      return quantifierRules[quantifier] || quantifierRules.other;\n    }\n    /**\r\n     * Formats a number into a string.\r\n     * Uses `Intl.NumberFormat` when available.\r\n     * @param  {number} number\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"formatNumber\",\n    value: function formatNumber(number) {\n      return this.numberFormat ? this.numberFormat.format(number) : String(number);\n    }\n    /**\r\n     * Returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.\r\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\r\n     * @return {Object}\r\n     */\n\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      return {\n        locale: this.locale,\n        style: this.style,\n        numeric: this.numeric\n      };\n    }\n  }]);\n\n  return RelativeTimeFormat;\n}();\n/**\r\n * Returns an array containing those of the provided locales\r\n * that are supported in collation without having to fall back\r\n * to the runtime's default locale.\r\n * @param {(string|string[])} locale - A string with a BCP 47 language tag, or an array of such strings. For the general form of the locales argument, see the Intl page.\r\n * @param {Object} [options] - An object that may have the following property:\r\n * @param {string} [options.localeMatcher=\"lookup\"] - The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\". Currently only \"lookup\" is supported.\r\n * @return {string[]} An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.\r\n * @example\r\n * var locales = ['ban', 'id-u-co-pinyin', 'es-PY']\r\n * var options = { localeMatcher: 'lookup' }\r\n * // Returns [\"id\", \"es-PY\"]\r\n * Intl.RelativeTimeFormat.supportedLocalesOf(locales, options)\r\n */\n\n\nexport { RelativeTimeFormat as default };\n\nRelativeTimeFormat.supportedLocalesOf = function (locales) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Convert `locales` to an array.\n  if (typeof locales === 'string') {\n    locales = [locales];\n  }\n\n  return locales.filter(function (locale) {\n    return resolveLocale(locale, options);\n  });\n};\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\n\n\nRelativeTimeFormat.addLocale = addLocaleData;\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\n\nRelativeTimeFormat.setDefaultLocale = setDefaultLocale;\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\n\nRelativeTimeFormat.getDefaultLocale = getDefaultLocale;\n/**\r\n * Extracts language from an IETF BCP 47 language tag.\r\n * @param {string} languageTag - IETF BCP 47 language tag.\r\n * @return {string}\r\n * @example\r\n * // Returns \"he\"\r\n * getLanguageFromLanguageTag(\"he-IL-u-ca-hebrew-tz-jeruslm\")\r\n * // Returns \"ar\"\r\n * getLanguageFromLanguageTag(\"ar-u-nu-latn\")\r\n */\n// export function getLanguageFromLanguageTag(languageTag) {\n//   const hyphenIndex = languageTag.indexOf('-')\n//   if (hyphenIndex > 0) {\n//     return languageTag.slice(0, hyphenIndex)\n//   }\n//   return languageTag\n// }\n//# sourceMappingURL=RelativeTimeFormat.js.map","/**\r\n * A basic in-memory cache.\r\n *\r\n * import Cache from 'javascript-time-ago/Cache'\r\n * const cache = new Cache()\r\n * const object = cache.get('key1', 'key2', ...) || cache.put('key1', 'key2', ..., createObject())\r\n */\r\nexport default class Cache {\r\n\tcache = {}\r\n\r\n\tget(...keys) {\r\n\t\tlet cache = this.cache\r\n\t\tfor (const key of keys) {\r\n\t\t\tif (typeof cache !== 'object') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tcache = cache[key]\r\n\t\t}\r\n\t\treturn cache\r\n\t}\r\n\r\n\tput(...keys) {\r\n\t\tconst value = keys.pop()\r\n\t\tconst lastKey = keys.pop()\r\n\t\tlet cache = this.cache\r\n\t\tfor (const key of keys) {\r\n\t\t\tif (typeof cache[key] !== 'object') {\r\n\t\t\t\tcache[key] = {}\r\n\t\t\t}\r\n\t\t\tcache = cache[key]\r\n\t\t}\r\n\t\treturn cache[lastKey] = value\r\n\t}\r\n}","export const minute = 60 // in seconds\r\n\r\nexport const hour = 60 * minute // in seconds\r\n\r\nexport const day = 24 * hour // in seconds\r\n\r\n// https://www.quora.com/What-is-the-average-number-of-days-in-a-month\r\nexport const month = 30.44 * day // in seconds\r\n\r\n// \"400 years have 146097 days (taking into account leap year rules)\"\r\nexport const year = (146097 / 400) * day // in seconds\r\n\r\n/**\r\n * Returns a step of gradation corresponding to the unit.\r\n * @param  {Object[]} gradation\r\n * @param  {string} unit\r\n * @return {?Object}\r\n */\r\nexport function getStep(gradation, unit) {\r\n\tfor (const step of gradation) {\r\n\t\tif (step.unit === unit) {\r\n\t\t\treturn step\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts value to a `Date`\r\n * @param {(number|Date)} value\r\n * @return {Date}\r\n */\r\nexport function getDate(value) {\r\n\treturn value instanceof Date ? value : new Date(value)\r\n}","import { day, month, year } from './helpers'\r\n\r\n// just now\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// 5 minutes ago\r\n// 10 minutes ago\r\n// 15 minutes ago\r\n// 20 minutes ago\r\n// an hour ago\r\n// 2 hours ago\r\n// …\r\n// 20 hours ago\r\n// a day ago\r\n// 2 days ago\r\n// 5 days ago\r\n// a week ago\r\n// 2 weeks ago\r\n// 3 weeks ago\r\n// a month ago\r\n// 2 months ago\r\n// 4 months ago\r\n// a year ago\r\n// 2 years ago\r\n// …\r\nexport default\r\n[\r\n\t{\r\n\t\tfactor: 1,\r\n\t\tunit: 'now'\r\n\t},\r\n\t{\r\n\t\tthreshold: 1,\r\n\t\tthreshold_for_now: 45,\r\n\t\tfactor: 1,\r\n\t\tunit: 'second'\r\n\t},\r\n\t{\r\n\t\tthreshold: 45,\r\n\t\tfactor: 60,\r\n\t\tunit: 'minute'\r\n\t},\r\n\t{\r\n\t\tthreshold: 2.5 * 60,\r\n\t\tfactor: 60,\r\n\t\tgranularity: 5,\r\n\t\tunit: 'minute'\r\n\t},\r\n\t{\r\n\t\tthreshold: 22.5 * 60,\r\n\t\tfactor: 30 * 60,\r\n\t\tunit: 'half-hour'\r\n\t},\r\n\t{\r\n\t\tthreshold: 42.5 * 60,\r\n\t\tthreshold_for_minute: 52.5 * 60,\r\n\t\tfactor: 60 * 60,\r\n\t\tunit: 'hour'\r\n\t},\r\n\t{\r\n\t\tthreshold: (20.5 / 24) * day,\r\n\t\tfactor: day,\r\n\t\tunit: 'day'\r\n\t},\r\n\t{\r\n\t\tthreshold: 5.5 * day,\r\n\t\tfactor: 7 * day,\r\n\t\tunit: 'week'\r\n\t},\r\n\t{\r\n\t\tthreshold: 3.5 * 7 * day,\r\n\t\tfactor: month,\r\n\t\tunit: 'month'\r\n\t},\r\n\t{\r\n\t\tthreshold: 10.5 * month,\r\n\t\tfactor: year,\r\n\t\tunit: 'year'\r\n\t}\r\n]","import { convenient } from './gradation'\r\n\r\n/**\r\n * Takes seconds `elapsed` and measures them against\r\n * `gradation` to return the suitable `gradation` step.\r\n *\r\n * @param {number} elapsed - Time interval (in seconds)\r\n *\r\n * @param {string[]} units - A list of allowed time units\r\n *                           (e.g. ['second', 'minute', 'hour', …])\r\n *\r\n * @param {Object} [gradation] - Time scale gradation steps.\r\n *\r\n *                               E.g.:\r\n *                               [\r\n *                                 { unit: 'second', factor: 1 },\r\n *                                 { unit: 'minute', factor: 60, threshold: 60 },\r\n *                                 { format(), threshold: 24 * 60 * 60 },\r\n *                                 …\r\n *                               ]\r\n *\r\n * @return {?Object} `gradation` step.\r\n */\r\nexport default function grade(elapsed, now, units, gradation = convenient)\r\n{\r\n\t// Leave only allowed time measurement units.\r\n\t// E.g. omit \"quarter\" unit.\r\n\tgradation = getAllowedSteps(gradation, units)\r\n\r\n\t// If no steps of gradation fit the conditions\r\n\t// then return nothing.\r\n\tif (gradation.length === 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Find the most appropriate gradation step\r\n\tconst i = findGradationStep(elapsed, now, gradation)\r\n\tconst step = gradation[i]\r\n\r\n\t// If time elapsed is too small and even\r\n\t// the first gradation step doesn't suit it\r\n\t// then return nothing.\r\n\tif (i === -1) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Apply granularity to the time amount\r\n\t// (and fall back to the previous step\r\n\t//  if the first level of granularity\r\n\t//  isn't met by this amount)\r\n\tif (step.granularity) {\r\n\t\t// Recalculate the elapsed time amount based on granularity\r\n\t\tconst amount = Math.round((elapsed / step.factor) / step.granularity) * step.granularity\r\n\t\t// If the granularity for this step\r\n\t\t// is too high, then fallback\r\n\t\t// to the previous step of gradation.\r\n\t\t// (if there is any previous step of gradation)\r\n\t\tif (amount === 0 && i > 0) {\r\n\t\t\treturn gradation[i - 1]\r\n\t\t}\r\n\t}\r\n\r\n\treturn step\r\n}\r\n\r\n/**\r\n * Gets threshold for moving from `fromStep` to `next_step`.\r\n * @param  {Object} fromStep - From step.\r\n * @param  {Object} next_step - To step.\r\n * @param  {number} now - The current timestamp.\r\n * @return {number}\r\n * @throws Will throw if no threshold is found.\r\n */\r\nfunction getThreshold(fromStep, toStep, now)\r\n{\r\n\tlet threshold\r\n\r\n\t// Allows custom thresholds when moving\r\n\t// from a specific step to a specific step.\r\n\tif (fromStep && (fromStep.id || fromStep.unit)) {\r\n\t\tthreshold = toStep[`threshold_for_${fromStep.id || fromStep.unit}`]\r\n\t}\r\n\r\n\t// If no custom threshold is set for this transition\r\n\t// then use the usual threshold for the next step.\r\n\tif (threshold === undefined) {\r\n\t\tthreshold = toStep.threshold\r\n\t}\r\n\r\n\t// Convert threshold to a number.\r\n\tif (typeof threshold === 'function') {\r\n\t\tthreshold = threshold(now)\r\n\t}\r\n\r\n\t// Throw if no threshold is found.\r\n\tif (fromStep && typeof threshold !== 'number') {\r\n\t\t// Babel transforms `typeof` into some \"branches\"\r\n\t\t// so istanbul will show this as \"branch not covered\".\r\n\t\t/* istanbul ignore next */\r\n\t\tconst type = typeof threshold\r\n\t\tthrow new Error(`Each step of a gradation must have a threshold defined except for the first one. Got \"${threshold}\", ${type}. Step: ${JSON.stringify(toStep)}`)\r\n\t}\r\n\r\n\treturn threshold\r\n}\r\n\r\n/**\r\n * @param  {number} elapsed - Time elapsed (in seconds).\r\n * @param  {number} now - Current timestamp.\r\n * @param  {Object} gradation - Gradation.\r\n * @param  {number} i - Gradation step currently being tested.\r\n * @return {number} Gradation step index.\r\n */\r\nfunction findGradationStep(elapsed, now, gradation, i = 0)\r\n{\r\n\t// If the threshold for moving from previous step\r\n\t// to this step is too high then return the previous step.\r\n\tif (elapsed < getThreshold(gradation[i - 1], gradation[i], now)) {\r\n\t\treturn i - 1\r\n\t}\r\n\t// If it's the last step of gradation then return it.\r\n\tif (i === gradation.length - 1) {\r\n\t\treturn i\r\n\t}\r\n\t// Move to the next step.\r\n\treturn findGradationStep(elapsed, now, gradation, i + 1)\r\n}\r\n\r\n/**\r\n * Leaves only allowed gradation steps.\r\n * @param  {Object[]} gradation\r\n * @param  {string[]} units - Allowed time units.\r\n * @return {Object[]}\r\n */\r\nfunction getAllowedSteps(gradation, units)\r\n{\r\n\treturn gradation.filter(({ unit }) => {\r\n\t\t// If this step has a `unit` defined\r\n\t\t// then this `unit` must be in the list of `units` allowed.\r\n\t\tif (unit) {\r\n\t\t\treturn units.indexOf(unit) >= 0\r\n\t\t}\r\n\t\t// A gradation step is not required to specify a `unit`.\r\n\t\t// E.g. for Twitter gradation it specifies `format()` instead.\r\n\t\treturn true\r\n\t})\r\n}","// Chooses the most appropriate locale\r\n// (one of the registered ones)\r\n// based on the list of preferred `locales` supplied by the user.\r\n//\r\n// @param {string[]} locales - the list of preferable locales (in [IETF format](https://en.wikipedia.org/wiki/IETF_language_tag)).\r\n// @param {Function} isLocaleDataAvailable - tests if a locale is available.\r\n//\r\n// @returns {string} The most suitable locale\r\n//\r\n// @example\r\n// // Returns 'en'\r\n// chooseLocale(['en-US'], undefined, (locale) => locale === 'ru' || locale === 'en')\r\n//\r\nexport default function chooseLocale(locales, isLocaleDataAvailable)\r\n{\r\n\t// This is not an intelligent algorythm,\r\n\t// but it will do for this library's case.\r\n\t// `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\r\n\tfor (let locale of locales) {\r\n\t\tif (isLocaleDataAvailable(locale)) {\r\n\t\t\treturn locale\r\n\t\t}\r\n\t\tconst parts = locale.split('-')\r\n\t\twhile (parts.length > 1) {\r\n\t\t\tparts.pop()\r\n\t\t\tlocale = parts.join('-')\r\n\t\t\tif (isLocaleDataAvailable(locale)) {\r\n\t\t\t\treturn locale\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthrow new Error(`No locale data has been registered for any of the locales: ${locales.join(', ')}`)\r\n}\r\n\r\n/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\r\nexport function intlDateTimeFormatSupportedLocale(locales) {\r\n\t/* istanbul ignore else */\r\n\tif (intlDateTimeFormatSupported()) {\r\n\t\treturn Intl.DateTimeFormat.supportedLocalesOf(locales)[0]\r\n\t}\r\n}\r\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\r\nexport function intlDateTimeFormatSupported() {\r\n\t// Babel transforms `typeof` into some \"branches\"\r\n\t// so istanbul will show this as \"branch not covered\".\r\n\t/* istanbul ignore next */\r\n\tconst isIntlAvailable = typeof Intl === 'object'\r\n\treturn isIntlAvailable && typeof Intl.DateTimeFormat === 'function'\r\n}","import { convenient } from '../gradation'\r\n\r\nexport default\r\n{\r\n\tgradation: convenient,\r\n\tflavour: ['long-convenient', 'long'],\r\n\tunits:\r\n\t[\r\n\t\t'now',\r\n\t\t'minute',\r\n\t\t'hour',\r\n\t\t'day',\r\n\t\t'week',\r\n\t\t'month',\r\n\t\t'year'\r\n\t]\r\n}","import { day, month, year } from './helpers'\r\n\r\n// just now\r\n// 1 second ago\r\n// 2 seconds ago\r\n// …\r\n// 59 seconds ago\r\n// 1 minute ago\r\n// 2 minutes ago\r\n// …\r\n// 59 minutes ago\r\n// 1 hour ago\r\n// 2 hours ago\r\n// …\r\n// 24 hours ago\r\n// 1 day ago\r\n// 2 days ago\r\n// …\r\n// 7 days ago\r\n// 1 week ago\r\n// 2 weeks ago\r\n// …\r\n// 3 weeks ago\r\n// 1 month ago\r\n// 2 months ago\r\n// …\r\n// 11 months ago\r\n// 1 year ago\r\n// 2 years ago\r\n// …\r\nexport default\r\n[\r\n\t{\r\n\t\tfactor: 1,\r\n\t\tunit: 'now'\r\n\t},\r\n\t{\r\n\t\tthreshold: 0.5,\r\n\t\tfactor: 1,\r\n\t\tunit: 'second'\r\n\t},\r\n\t{\r\n\t\tthreshold: 59.5,\r\n\t\tfactor: 60,\r\n\t\tunit: 'minute'\r\n\t},\r\n\t{\r\n\t\tthreshold: 59.5 * 60,\r\n\t\tfactor: 60 * 60,\r\n\t\tunit: 'hour'\r\n\t},\r\n\t{\r\n\t\tthreshold: 23.5 * 60 * 60,\r\n\t\tfactor: day,\r\n\t\tunit: 'day'\r\n\t},\r\n\t{\r\n\t\tthreshold: 6.5 * day,\r\n\t\tfactor: 7 * day,\r\n\t\tunit: 'week'\r\n\t},\r\n\t{\r\n\t\tthreshold: 3.5 * 7 * day,\r\n\t\tfactor: month,\r\n\t\tunit: 'month'\r\n\t},\r\n\t{\r\n\t\tthreshold: 11.5 * month,\r\n\t\tfactor: year,\r\n\t\tunit: 'year'\r\n\t}\r\n]","import { canonical, day, hour, getStep, getDate } from '../gradation'\r\nimport { intlDateTimeFormatSupported } from '../locale'\r\n\r\n// A cache for `Intl.DateTimeFormat` twitter formatters\r\n// for various locales (is a global variable).\r\nconst formatters = {}\r\n\r\n// Twitter style relative time formatting.\r\n// (\"1m\", \"2h\", \"Mar 3\", \"Apr 4, 2012\").\r\n// Seconds, minutes and hours are shown relatively,\r\n// and other intervals can be shown using full date format.\r\nexport default\r\n{\r\n\t// Twitter gradation is derived from \"canonical\" gradation\r\n\t// adjusting its \"minute\" `threshold` to be 45.\r\n\tgradation: [\r\n\t\t// Minutes\r\n\t\t{\r\n\t\t\t...getStep(canonical, 'minute'),\r\n\t\t\tthreshold: 45\r\n\t\t},\r\n\t\t// Hours\r\n\t\tgetStep(canonical, 'hour'),\r\n\t\t// If `date` and `now` happened the same year,\r\n\t\t// then only output month and day.\r\n\t\t{\r\n\t\t\tthreshold: day - 0.5 * hour,\r\n\t\t\tformat(value, locale) {\r\n\t\t\t\t// Whether can use `Intl.DateTimeFormat`.\r\n\t\t\t\t// If `Intl` is not available,\r\n\t\t\t\t// or the locale is not supported,\r\n\t\t\t\t// then don't override the default labels.\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!intlDateTimeFormatSupported()) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale]) {\r\n\t\t\t\t\tformatters[locale] = {}\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale].this_year) {\r\n\t\t\t\t\t// \"Apr 11\" (MMMd)\r\n\t\t\t\t\tformatters[locale].this_year = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\t\t\tmonth : 'short',\r\n\t\t\t\t\t\tday   : 'numeric'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t// Output month and day.\r\n\t\t\t\treturn formatters[locale].this_year.format(getDate(value))\r\n\t\t\t}\r\n\t\t},\r\n\t\t// If `date` and `now` happened in defferent years,\r\n\t\t// then output day, month and year.\r\n\t\t{\r\n\t\t\tthreshold(now) {\r\n\t\t\t\t// Jan 1st of the next year.\r\n\t\t\t\tconst nextYear = new Date(new Date(now).getFullYear() + 1, 0)\r\n\t\t\t\treturn (nextYear.getTime() - now) / 1000\r\n\t\t\t},\r\n\t\t\tformat(value, locale) {\r\n\t\t\t\t// Whether can use `Intl.DateTimeFormat`.\r\n\t\t\t\t// If `Intl` is not available,\r\n\t\t\t\t// or the locale is not supported,\r\n\t\t\t\t// then don't override the default labels.\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!intlDateTimeFormatSupported()) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore if */\r\n\t\t\t\tif (!formatters[locale]) {\r\n\t\t\t\t\tformatters[locale] = {}\r\n\t\t\t\t}\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (!formatters[locale].other) {\r\n\t\t\t\t\t// \"Apr 11, 2017\" (yMMMd)\r\n\t\t\t\t\tformatters[locale].other = new Intl.DateTimeFormat(locale, {\r\n\t\t\t\t\t\tyear  : 'numeric',\r\n\t\t\t\t\t\tmonth : 'short',\r\n\t\t\t\t\t\tday   : 'numeric'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t// Output day, month and year.\r\n\t\t\t\treturn formatters[locale].other.format(getDate(value))\r\n\t\t\t}\r\n\t\t}\r\n\t],\r\n\r\n\tflavour: [\r\n\t\t'tiny',\r\n\t\t'short-time',\r\n\t\t'narrow',\r\n\t\t'short'\r\n\t]\r\n}\r\n","import { convenient } from '../gradation'\r\n\r\n// Similar to the default style but with \"ago\" omitted.\r\n//\r\n// just now\r\n// 5 minutes\r\n// 10 minutes\r\n// 15 minutes\r\n// 20 minutes\r\n// an hour\r\n// 2 hours\r\n// …\r\n// 20 hours\r\n// 1 day\r\n// 2 days\r\n// a week\r\n// 2 weeks\r\n// 3 weeks\r\n// a month\r\n// 2 months\r\n// 3 months\r\n// 4 months\r\n// a year\r\n// 2 years\r\n//\r\nexport default\r\n{\r\n\tgradation: convenient,\r\n\tflavour: 'long-time',\r\n\tunits:\r\n\t[\r\n\t\t'now',\r\n\t\t'minute',\r\n\t\t'hour',\r\n\t\t'day',\r\n\t\t'week',\r\n\t\t'month',\r\n\t\t'year'\r\n\t]\r\n}","// Fallback locale.\r\n// (when not a single one of the supplied \"preferred\" locales is available)\r\nlet defaultLocale = 'en'\r\n\r\n// For all locales added\r\n// their relative time formatter messages will be stored here.\r\nconst localesData = {}\r\n\r\nexport function getLocaleData(locale) {\r\n\treturn localesData[locale]\r\n}\r\n\r\nexport function addLocaleData(localeData) {\r\n\tif (!localeData) {\r\n\t\tthrow new Error('[javascript-time-ago] No locale data passed.')\r\n\t}\r\n\t// This locale data is stored in a global variable\r\n\t// and later used when calling `.format(time)`.\r\n\tlocalesData[localeData.locale] = localeData\r\n}","import RelativeTimeFormat from 'relative-time-format'\r\n\r\nimport Cache from './cache'\r\nimport grade from './grade'\r\nimport chooseLocale from './locale'\r\nimport { twitterStyle, timeStyle, defaultStyle } from './style'\r\n\r\nimport {\r\n\taddLocaleData,\r\n\tgetLocaleData\r\n} from './LocaleDataStore'\r\n\r\n// const EXTRA_STYLES = [\r\n// \t'long-convenient',\r\n// \t'long-time',\r\n// \t'short-convenient',\r\n// \t'short-time',\r\n// \t'tiny'\r\n// ]\r\n\r\n// Valid time units.\r\nconst UNITS = [\r\n\t'now',\r\n\t// The rest are the same as in `Intl.RelativeTimeFormat`.\r\n\t'second',\r\n\t'minute',\r\n\t'hour',\r\n\t'day',\r\n\t'week',\r\n\t'month',\r\n\t'quarter',\r\n\t'year'\r\n]\r\n\r\nexport default class JavascriptTimeAgo\r\n{\r\n\t/**\r\n\t * @param {(string|string[])} locales=[] - Preferred locales (or locale).\r\n\t */\r\n\tconstructor(locales = [])\r\n\t{\r\n\t\t// Convert `locales` to an array.\r\n\t\tif (typeof locales === 'string') {\r\n\t\t\tlocales = [locales]\r\n\t\t}\r\n\r\n\t\t// Choose the most appropriate locale\r\n\t\t// (one of the previously added ones)\r\n\t\t// based on the list of preferred `locales` supplied by the user.\r\n\t\tthis.locale = chooseLocale(\r\n\t\t\tlocales.concat(RelativeTimeFormat.getDefaultLocale()),\r\n\t\t\tgetLocaleData\r\n\t\t)\r\n\r\n\t\t// Use `Intl.NumberFormat` for formatting numbers (when available).\r\n\t\tif (typeof Intl !== 'undefined' && Intl.NumberFormat) {\r\n\t\t\tthis.numberFormat = new Intl.NumberFormat(this.locale)\r\n\t\t}\r\n\r\n\t\t// Cache `Intl.RelativeTimeFormat` instance.\r\n\t\tthis.relativeTimeFormatCache = new Cache()\r\n\t}\r\n\r\n\t// Formats the relative date/time.\r\n\t//\r\n\t// @return {string} Returns the formatted relative date/time.\r\n\t//\r\n\t// @param {(Object|string)} [style] - Relative date/time formatting style.\r\n\t//\r\n\t// @param {string[]} [style.units] - A list of allowed time units\r\n\t//                                  (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Function} [style.custom] - `function ({ elapsed, time, date, now })`.\r\n\t//                                    If this function returns a value, then\r\n\t//                                    the `.format()` call will return that value.\r\n\t//                                    Otherwise it has no effect.\r\n\t//\r\n\t// @param {string} [style.flavour] - e.g. \"long\", \"short\", \"tiny\", etc.\r\n\t//\r\n\t// @param {Object[]} [style.gradation] - Time scale gradation steps.\r\n\t//\r\n\t// @param {string} style.gradation[].unit - Time interval measurement unit.\r\n\t//                                          (e.g. ['second', 'minute', 'hour', …])\r\n\t//\r\n\t// @param {Number} style.gradation[].factor - Time interval measurement unit factor.\r\n\t//                                            (e.g. `60` for 'minute')\r\n\t//\r\n\t// @param {Number} [style.gradation[].granularity] - A step for the unit's \"amount\" value.\r\n\t//                                                   (e.g. `5` for '0 minutes', '5 minutes', etc)\r\n\t//\r\n\t// @param {Number} [style.gradation[].threshold] - Time interval measurement unit threshold.\r\n\t//                                                 (e.g. `45` seconds for 'minute').\r\n\t//                                                 There can also be specific `threshold_[unit]`\r\n\t//                                                 thresholds for fine-tuning.\r\n\t//\r\n\tformat(input, style = defaultStyle)\r\n\t{\r\n\t\tif (typeof style === 'string')\r\n\t\t{\r\n\t\t\tswitch (style)\r\n\t\t\t{\r\n\t\t\t\tcase 'twitter':\r\n\t\t\t\t\tstyle = twitterStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'time':\r\n\t\t\t\t\tstyle = timeStyle\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tstyle = defaultStyle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst { date, time } = getDateAndTimeBeingFormatted(input)\r\n\r\n\t\t// Get locale messages for this formatting flavour\r\n\t\tconst { flavour, localeData } = this.getLocaleData(style.flavour)\r\n\r\n\t\t// Can pass a custom `now`, e.g. for testing purposes.\r\n\t\t// Technically it doesn't belong to `style`\r\n\t\t// but since this is an undocumented internal feature,\r\n\t\t// taking it from the `style` argument will do (for now).\r\n\t\tconst now = style.now || Date.now()\r\n\r\n\t\t// how much time elapsed (in seconds)\r\n\t\tconst elapsed = (now - time) / 1000 // in seconds\r\n\r\n\t\t// `custom` – A function of `{ elapsed, time, date, now, locale }`.\r\n\t\t// If this function returns a value, then the `.format()` call will return that value.\r\n\t\t// Otherwise the relative date/time is formatted as usual.\r\n\t\t// This feature is currently not used anywhere and is here\r\n\t\t// just for providing the ultimate customization point\r\n\t\t// in case anyone would ever need that. Prefer using\r\n\t\t// `gradation[step].format(value, locale)` instead.\r\n\t\t//\r\n\t\t// I guess `custom` is deprecated and will be removed\r\n\t\t// in some future major version release.\r\n\t\t//\r\n\t\tif (style.custom)\r\n\t\t{\r\n\t\t\tconst custom = style.custom({\r\n\t\t\t\tnow,\r\n\t\t\t\tdate,\r\n\t\t\t\ttime,\r\n\t\t\t\telapsed,\r\n\t\t\t\tlocale : this.locale\r\n\t\t\t})\r\n\r\n\t\t\tif (custom !== undefined) {\r\n\t\t\t\treturn custom\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Available time interval measurement units.\r\n\t\tconst units = getTimeIntervalMeasurementUnits(localeData, style.units)\r\n\t\t// If no available time unit is suitable, just output an empty string.\r\n\t\tif (units.length === 0) {\r\n\t\t\tconsole.error(`Units \"${units.join(', ')}\" were not found in locale data for \"${this.locale}\".`)\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\t// Choose the appropriate time measurement unit\r\n\t\t// and get the corresponding rounded time amount.\r\n\t\tconst step = grade(\r\n\t\t\tMath.abs(elapsed),\r\n\t\t\tnow,\r\n\t\t\tunits,\r\n\t\t\tstyle.gradation\r\n\t\t)\r\n\r\n\t\t// If no time unit is suitable, just output an empty string.\r\n\t\t// E.g. when \"now\" unit is not available\r\n\t\t// and \"second\" has a threshold of `0.5`\r\n\t\t// (e.g. the \"canonical\" grading scale).\r\n\t\tif (!step) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\r\n\t\tif (step.format) {\r\n\t\t\treturn step.format(date || time, this.locale)\r\n\t\t}\r\n\r\n\t\tconst { unit, factor, granularity } = step\r\n\r\n\t\tlet amount = Math.abs(elapsed) / factor\r\n\r\n\t\t// Apply granularity to the time amount\r\n\t\t// (and fallback to the previous step\r\n\t\t//  if the first level of granularity\r\n\t\t//  isn't met by this amount)\r\n\t\tif (granularity) {\r\n\t\t\t// Recalculate the elapsed time amount based on granularity\r\n\t\t\tamount = Math.round(amount / granularity) * granularity\r\n\t\t}\r\n\r\n\t\t// `Intl.RelativeTimeFormat` doesn't operate in \"now\" units.\r\n\t\tif (unit === 'now') {\r\n\t\t\treturn getNowMessage(localeData, -1 * Math.sign(elapsed))\r\n\t\t}\r\n\r\n\t\tswitch (flavour) {\r\n\t\t\tcase 'long':\r\n\t\t\tcase 'short':\r\n\t\t\tcase 'narrow':\r\n\t\t\t\t// Format `value` using `Intl.RelativeTimeFormat`.\r\n\t\t\t\treturn this.getFormatter(flavour).format(-1 * Math.sign(elapsed) * Math.round(amount), unit)\r\n\t\t\tdefault:\r\n\t\t\t\t// Format `value`.\r\n\t\t\t\t// (mimicks `Intl.RelativeTimeFormat` with the addition of extra styles)\r\n\t\t\t\treturn this.formatValue(-1 * Math.sign(elapsed) * Math.round(amount), unit, localeData)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mimicks what `Intl.RelativeTimeFormat` does for additional locale styles.\r\n\t * @param  {number} value\r\n\t * @param  {string} unit\r\n\t * @param  {object} localeData — Relative time messages for the flavor.\r\n\t * @return {string}\r\n\t */\r\n\tformatValue(value, unit, localeData) {\r\n\t\treturn this.getRule(value, unit, localeData).replace('{0}', this.formatNumber(Math.abs(value)))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns formatting rule for `value` in `units` (either in past or in future).\r\n\t * @param {number} value - Time interval value.\r\n\t * @param {string} unit - Time interval measurement unit.\r\n\t * @param  {object} localeData — Relative time messages for the flavor.\r\n\t * @return {string}\r\n\t * @example\r\n\t * // Returns \"{0} days ago\"\r\n\t * getRule(-2, \"day\")\r\n\t */\r\n\tgetRule(value, unit, localeData) {\r\n\t\tconst unitRules = localeData[unit]\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof unitRules === 'string') {\r\n\t\t\treturn unitRules\r\n\t\t}\r\n\t\t// Choose either \"past\" or \"future\" based on time `value` sign.\r\n\t\t// If \"past\" is same as \"future\" then they're stored as \"other\".\r\n\t\t// If there's only \"other\" then it's being collapsed.\r\n\t\tconst quantifierRules = unitRules[value <= 0 ? 'past' : 'future'] || unitRules\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof quantifierRules === 'string') {\r\n\t\t\treturn quantifierRules\r\n\t\t}\r\n\t\t// Quantify `value`.\r\n\t\tconst quantify = getLocaleData(this.locale).quantify\r\n\t\tlet quantifier = quantify && quantify(Math.abs(value))\r\n\t\t// There seems to be no such locale in CLDR\r\n\t\t// for which `quantify` is missing\r\n\t\t// and still `past` and `future` messages\r\n\t\t// contain something other than \"other\".\r\n\t\t/* istanbul ignore next */\r\n\t\tquantifier = quantifier || 'other'\r\n\t\t// \"other\" rule is supposed to always be present.\r\n\t\t// If only \"other\" rule is present then \"rules\" is not an object and is a string.\r\n\t\treturn quantifierRules[quantifier] || quantifierRules.other\r\n\t}\r\n\r\n\t/**\r\n\t * Formats a number into a string.\r\n\t * Uses `Intl.NumberFormat` when available.\r\n\t * @param  {number} number\r\n\t * @return {string}\r\n\t */\r\n\tformatNumber(number) {\r\n\t\treturn this.numberFormat ? this.numberFormat.format(number) : String(number)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an `Intl.RelativeTimeFormat` for a given `flavor`.\r\n\t * @param {string} flavor\r\n\t * @return {object} `Intl.RelativeTimeFormat` instance\r\n\t */\r\n\tgetFormatter(flavor) {\r\n\t\t// `Intl.RelativeTimeFormat` instance creation is assumed a\r\n\t\t// lengthy operation so the instances are cached and reused.\r\n\t\treturn this.relativeTimeFormatCache.get(this.locale, flavor) ||\r\n\t\t\tthis.relativeTimeFormatCache.put(this.locale, flavor, new RelativeTimeFormat(this.locale, { style: flavor }))\r\n\t}\r\n\r\n\t/**\r\n\t * Gets locale messages for this formatting flavour\r\n\t *\r\n\t * @param {(string|string[])} flavour - Relative date/time formatting flavour.\r\n\t *                                      If it's an array then all flavours are tried in order.\r\n\t *\r\n\t * @returns {Object} Returns an object of shape { flavour, localeData }\r\n\t */\r\n\tgetLocaleData(flavour = []) {\r\n\t\t// Get relative time formatting rules for this locale\r\n\t\tconst localeData = getLocaleData(this.locale)\r\n\r\n\t\t// Convert `flavour` to an array.\r\n\t\tif (typeof flavour === 'string') {\r\n\t\t\tflavour = [flavour]\r\n\t\t}\r\n\r\n\t\t// \"long\" flavour is the default one.\r\n\t\t// (it's always present)\r\n\t\tflavour = flavour.concat('long')\r\n\r\n\t\t// Find a suitable flavour.\r\n\t\tfor (const _ of flavour) {\r\n\t\t\tif (localeData[_]) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tflavour : _,\r\n\t\t\t\t\tlocaleData : localeData[_]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Can't happen - \"long\" flavour is always present.\r\n\t\t// throw new Error(`None of the flavours - ${flavour.join(', ')} - was found for locale \"${this.locale}\".`)\r\n\t}\r\n}\r\n\r\n/**\r\n * Gets default locale.\r\n * @return  {string} locale\r\n */\r\nJavascriptTimeAgo.getDefaultLocale = RelativeTimeFormat.getDefaultLocale\r\n\r\n/**\r\n * Sets default locale.\r\n * @param  {string} locale\r\n */\r\nJavascriptTimeAgo.setDefaultLocale = RelativeTimeFormat.setDefaultLocale\r\n\r\n/**\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n */\r\nJavascriptTimeAgo.addLocale = function(localeData) {\r\n\taddLocaleData(localeData)\r\n\tRelativeTimeFormat.addLocale(localeData)\r\n}\r\n\r\n/**\r\n * (legacy alias)\r\n * Adds locale data for a specific locale.\r\n * @param {Object} localeData\r\n * @deprecated\r\n */\r\nJavascriptTimeAgo.locale = JavascriptTimeAgo.addLocale\r\n\r\n// Normalizes `.format()` `time` argument.\r\nfunction getDateAndTimeBeingFormatted(input)\r\n{\r\n\tif (input.constructor === Date)\r\n\t{\r\n\t\treturn {\r\n\t\t\tdate : input,\r\n\t\t\ttime : input.getTime()\r\n\t\t}\r\n\t}\r\n\r\n\tif (typeof input === 'number')\r\n\t{\r\n\t\treturn {\r\n\t\t\ttime : input,\r\n\t\t\t// `date` is not required for formatting\r\n\t\t\t// relative times unless \"twitter\" preset is used.\r\n\t\t\t// date : new Date(input)\r\n\t\t}\r\n\t}\r\n\r\n\t// For some weird reason istanbul doesn't see this `throw` covered.\r\n\t/* istanbul ignore next */\r\n\tthrow new Error(`Unsupported relative time formatter input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// Get available time interval measurement units.\r\nfunction getTimeIntervalMeasurementUnits(localeData, restrictedSetOfUnits)\r\n{\r\n\t// All available time interval measurement units.\r\n\tlet units = Object.keys(localeData)\r\n\r\n\t// If only a specific set of available\r\n\t// time measurement units can be used.\r\n\tif (restrictedSetOfUnits) {\r\n\t\t// Reduce available time interval measurement units\r\n\t\t// based on user's preferences.\r\n\t\tunits = restrictedSetOfUnits.filter(_ => units.indexOf(_) >= 0)\r\n\t}\r\n\r\n\t// Stock `Intl.RelativeTimeFormat` locale data doesn't have \"now\" units.\r\n\t// So either \"now\" is present in extended locale data\r\n\t// or it's taken from \".second.current\".\r\n\tif ((!restrictedSetOfUnits || restrictedSetOfUnits.indexOf('now') >= 0) &&\r\n\t\tunits.indexOf('now') < 0) {\r\n\t\tif (localeData.second.current) {\r\n\t\t\tunits.unshift('now')\r\n\t\t}\r\n\t}\r\n\r\n\treturn units\r\n}\r\n\r\nfunction getNowMessage(localeData, value) {\r\n\t// Specific \"now\" message form extended locale data (if present).\r\n\tif (localeData.now) {\r\n\t\t// Bundle size optimization technique.\r\n\t\tif (typeof localeData.now === 'string') {\r\n\t\t\treturn localeData.now\r\n\t\t}\r\n\t\t// Not handling `value === 0` as `localeData.now.current` here\r\n\t\t// because it wouldn't make sense: \"now\" is a moment,\r\n\t\t// so one can't possibly differentiate between a\r\n\t\t// \"previous\" moment, a \"current\" moment and a \"next moment\".\r\n\t\t// It can only be differentiated between \"past\" and \"future\".\r\n\t\tif (value <= 0) {\r\n\t\t\treturn localeData.now.past\r\n\t\t} else {\r\n\t\t\treturn localeData.now.future\r\n\t\t}\r\n\t}\r\n\t// Use \".second.current\" as \"now\" message.\r\n\treturn localeData.second.current\r\n\t// If this function was called then\r\n\t// it means that either \"now\" unit messages are\r\n\t// available or \".second.current\" message is present.\r\n}","export { default } from './modules/JavascriptTimeAgo'\r\n\r\nexport {\r\n\tintlDateTimeFormatSupported as intlDateTimeFormatSupported,\r\n\tintlDateTimeFormatSupportedLocale as intlDateTimeFormatSupportedLocale\r\n} from './modules/locale'"],"sourceRoot":""}